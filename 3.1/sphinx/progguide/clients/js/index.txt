Zato WebSocket JavaScript client
================================

Overview
========

In addition to typical service invocations, WebSocket (WSX) connections let the client to participate in messaging scenarios
with clients acting both as initiators and recipients of messages.

In particular, pub/sub communication is a good fit for WSX because it allows servers to push notifications to connected
WSX clients without requiring that clients poll for new messages.

Installation
============

Add the NPM `zato-js-client <>`_ to your project's dependencies.

GitHub
======

If you would like to check the client's source code, it is available `on GitHub <https://github.com/zatosource/zato-js-client>`_.

Prerequisites
=============

Before a WSX channel for clients can be created, one needs to upload a new service that will act as a configuration gateway,
allowing the client to invoke only selected services.

The service subclasses *zato.server.service.internal.helpers.WebSocketsGateway* which actually does the whole work, and one needs only
to specify a list of services allowed.

In this way, each client may be given a subset of services that it should have access to.

For instance, the configuration below will let a client invoke services 'zato.ping' and 'zato.ping2' and none other of possibly
many services available through servers.

::

  # -*- coding: utf-8 -*-

  # Zato
  from zato.server.service.internal.helpers import WebSocketsGateway

  class MyWSXGateway(WebSocketsGateway):

      # Give the service a unique name
      name = 'my.wsx.gateway'

      # Only these services may be invoked
      services_allowed = [
          'zato.ping',
          'zato.ping2',
      ]

In web-admin
============

* Create :doc:`HTTP Basic Auth <../../../web-admin/security/basic-auth>` credentials to use by the client
* Create a :doc:`WSX channel <../../../web-admin/channels/wsx>` and make sure that it uses the service uploaded in
  the previous step, e.g.:

  .. image:: /gfx/progguide/clients/js/create-wsx-channel.png

JavaScript
==========

Once the NPM `zato-js-client <>`_ package is installed, the clients usage follows a few principles:

* Several attributes can be configured before the client is created
* One client may invoke multiple services or publish and subscribe messages to and from multiple topics
* Client will reconnect automatically if the server drops connection for any reason
* If the client is used from a web browser and the browser is restarted or page refreshed (F5, Ctrl-R),
  the client will not persist and a new client will not automatically have access to previous client instance's
  pub/sub subscriptions, if any were created

Configurable attributes
-----------------------

Basic connection details
~~~~~~~~~~~~~~~~~~~~~~~~

.. highlight:: javascript

::

  // Zato client object
  let client = ZatoWSXClient();

  // A unique ID representing this very client
  const client_id = Math.random().toString(24) + '-' + new Date().toISOString();

  // A human-readable name of the client, does not have to be unique,
  const client_name = 'My API client';

  // Where to find the Zato WSX channel
  const address = 'ws://localhost:50103/myapi'

  // Basic Auth credentials created previously
  const username = 'username1';
  const secret = 'secret1';

  // Fill out configuration
  client.client_id = client_id;
  client.client_name = client_name;
  client.address = address;
  client.username = username;
  client.secret = secret;

Callbacks
~~~~~~~~~

Each client needs to be supplied with two callback functions, invoked in specific situations:

* When the client connects or reconnects to a Zato channel

.. highlight:: javascript

::

  function when_ready(client) {
    console.log('Connected to '+ client.address);
  }

* Each time a message from Zato is received, either a notification or a response to a previously sent request

.. highlight:: javascript

::

  // A callback function to be invoked for each message received from Zato
  function on_message_received(client, msg, in_reply_to) {

    // Serialize to JSON for logging purposes
    const msg_as_string = JSON.stringify(msg);

    // If there is 'in_reply_to', this message must be a response to a previous request ..
    if(in_reply_to) {
        console.log('Response received' + msg_as_string);
    }

    // .. otherwise, this is a request, a notification, from server.
    else {
      console.log('Request received' + msg_as_string);
    }
  }

The callback functions need to be assigned to a previously created client instance:

.. highlight:: javascript

::

  let client = ZatoWSXClient();

  // (Skip basic configuration options here)
  ...

  // This will be invoked when the client connects
  client.when_ready = when_ready;

  // This will be invoked each time a message from Zato is received
  client.on_message_received = on_message_received;

----------------

How to connect
--------------

How to invoke services
----------------------

How to publish messages
-----------------------

How to subscribe to messages
----------------------------

How to unsubscribe
------------------

How to disconnect
-----------------
