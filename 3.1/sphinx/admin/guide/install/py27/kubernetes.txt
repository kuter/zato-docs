.. highlight:: sh

Zato's Docker image in Kubernetes (Python 2.7)
==============================================

This image include the last Zato version with an entrypoint script that can be used for every Zato component.

Docker image
------------

Download the Docker image for local usage:

::

    host$ sudo docker pull registry.gitlab.com/zatosource/docker-registry/cloud:3.1-py27


Requirements
------------

* Kubernetes.
* kubectl.

Start a local Kubernetes with Minikube
--------------------------------------

* `Install Minikube <https://kubernetes.io/docs/tasks/tools/install-minikube/>`_

* Start a Virtual Machine

::

    host$ minikube start


Deploy Zato to local Kubernetes
---------------------------------

* Clone GitHub repository to the the template

::

    host$ git clone https://github.com/zatosource/zato-build.git
    host$ cd zato-build/docker/kubernetes/

* Install `Dockerize <https://github.com/powerman/dockerize#installation>`_ . It will be used to create the zato-k8.yaml using environment variables.

* Edit the file **environment** and customize the environment variables. **SECRET_KEY** and **JWT_SECRET_KEY** variables are mandatory.

* Generate the zato-k8.yaml with your values from **environment**.

::

    host$ dockerize -env environment -template zato-k8.yaml.template:zato-k8.yaml

* Switch to Minikube context

::

    host$ kubectl config use-context minikube


* Deploy Zato to Kubernetes

::

    host$ kubectl apply -f zato-k8.yaml

* Check if the deploy is running

::

    host$ kubectl get pods --namespace=zato
    NAME                         READY   STATUS              RESTARTS   AGE
    bootstrap-6fb6c85c4c-4nx6l   0/1     ContainerCreating   0          22s
    postgres-57cf76f654-qcb2g    0/1     ContainerCreating   0          22s
    redis-5c46c79bd7-tt6cs       0/1     ContainerCreating   0          22s
    scheduler-9db4bb4d6-zgcmm    0/1     ContainerCreating   0          22s
    server-85bcf4ccbd-2lw45      0/1     ContainerCreating   0          22s
    server-85bcf4ccbd-gqbs2      0/1     ContainerCreating   0          22s
    webadmin-54688f5445-n4xkz    0/1     ContainerCreating   0          22s

- Check log of Zato server (the Zato Server pod name will be different)

::

    host$ kubectl logs --namespace=zato server-85bcf4ccbd-2lw45

- Get Zato's Web Admin interface URL

::

    host$ minikube service --namespace zato webadmin --url
    http://192.168.99.138:8183


Environment variables available
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Zato image uses several environment variables which can be used to fine-tune the resulting installation.

They are not required to use, and default values will be substituted if any is missing,
but they may be employed to configure particular details of each of the components.

============================ =================================================================================================
Variable                     Notes
============================ =================================================================================================
ZATO_WEB_ADMIN_PASSWORD      Password for the web adminâ€™s technical account user to connect with. If not defined,
                             the value is generated automatically at runtime.
ZATO_IDE_PUBLISHER_PASSWORD  Password for user `ide_publisher`, used for IDE integration. If not defined,
                             the value has to be set manually.
ZATO_ADMIN_INVOKE_PASSWORD   Password used for internal communication. If not defined, the value has to be set manually.
ZATO_ENMASSE_FILE            Full path or URL to :doc:`an enmasse file <../../enmasse>` with object definitions to been imported.
REDIS_HOSTNAME               Redis service hostname. Default value is **localhost**.
ODB_TYPE                     ODB type to use. Must be one of: `mysql` or `postgresql`.
ODB_HOSTNAME                 ODB hostname.
ODB_PORT                     ODB port.
ODB_NAME                     ODB database.
ODB_USERNAME                 ODB username.
ODB_PASSWORD                 ODB password.
SECRET_KEY                   A random secret key previously generated with the                    jN09DcGqhICFluzHVgokQj...
                             :doc:`zato crypto create-secret-key <../../../cli/crypto/create-secret-key>`.
                             It is used to encrypt passwords and other sensitive data in ODB.
                             Must be the same for all servers in a single cluster. If not
                             provided, a new key will be generated automatically.
JWT_SECRET_KEY               A random secret key previously generated with the                    MI8gn9ej9WCyM6LgHBSE3c...
                             :doc:`zato crypto create-secret-key <../../../cli/crypto/create-secret-key>`.
                             Used by
                             :doc:`JWT security definitions <../../../../web-admin/security/jwt>`.
                             If JWT is used, must be the same for all servers in a single
                             cluster. If not provided, a new key will be generated
                             automatically.
============================ =================================================================================================
